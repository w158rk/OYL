/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'antlr'
}

repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/central' }
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter'}
}

dependencies {
    testImplementation(platform('org.junit:junit-bom:5.7.2'))
	testImplementation('org.junit.jupiter:junit-jupiter')

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1-jre'

    // antlr 4
    antlr "org.antlr:antlr4:4.9.2"

    // pretty print tables
    implementation group: 'com.jakewharton.fliptables', name: 'fliptables', version: '1.1.0'

    // arg parser
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'


}


application {
    // Define the main class for the application.
    mainClass = 'pers.ruikai.pwms.App'
}

generateGrammarSource {
    // outputDirectory = file("src/main/java/pers/ruikai/pwms/compiler")
    arguments += ["-no-listener", "-visitor"]
}

tasks.withType(JavaCompile) {
    options.deprecation = true
    options.encoding = "UTF-8"
}

compileTestJava.options.encoding = "UTF-8"

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}


